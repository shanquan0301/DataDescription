if (class(res$sd) == "numeric"){
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sprintf(str_glue("%.{round_cont}f"), round(sd, round_cont)),
comb_sym[2]))
} else {
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sd,
comb_sym[2]))
}
n_loc <- which(names(res) == "mean")
names(res)[n_loc:(n_loc + 1)] <- fun
return(res)
}
data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 2,
round_cont = 3)
library(magrittr)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 2,
round_cont = 3)
View(res_tab)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cate = 2,
round_cont = 3)
#function for all-------
data_des <- function(data,
row_var = c("vs", "mpg"),
col_var = NULL,
col_perc = TRUE,
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cate = 1,
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
if (is.null(col_var)){
res_f <- data.frame(Variable = character(0), comb = character(0))
} else {
res_f <- data.frame(Variable = character(0), col_var = character(0), comb = character(0))
}
for (var in row_var){
print(var)
var <- as.name(var)
m_len <- data %$% length(unique(eval(var)))
m_class <- data %$% class(eval(var))
if(m_len == 2 | m_class %in% c("character", "logical", "factor")){
res <- cate_des(data = data,
row_var = as.character(var),
col_var = col_var,
col_perc = col_perc,
round_cate = round_cate)
} else {
res <- cont_des(data = data,
row_var = as.character(var),
col_var = col_var,
fun = fun,
comb_sym = comb_sym,
round_cont = round_cont,
...)
}
if(is.null(col_var)){
res <- res %>% select(Variable, comb)
} else {
res <- res %>% select(Variable, as.character(col_var), comb)
names(res)[2] <- "col_var"
}
res_f <- rbind(res_f, res)
}
if(is.null(col_var)){
return(res_f)
} else {
u_Variable <- unique(res_f$Variable)
res_f <- res_f %>% spread(key = col_var, value = comb)
#res_f <- res_f %>% filter (!is.na(Variable), !is.na(age_g)) %>% spread(key = col_var, value = comb)
res_f <- res_f[match(u_Variable, res_f$Variable), ]
names(res_f)[which(names(res_f) == "<NA>")] <- "All"
names(res_f)[-1] <- str_c(as.character(col_var), " (= ", names(res_f)[-1], ")")
return(res_f)
}
}
#function for category variable------
cate_des <- function(data,
row_var = "vs",
col_var = NULL,
col_perc = TRUE,
round_cate = 1){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
#if col_var == NULL, it means no column
if(is.null(col_var)){
res_2 <- data %>%
filter(!is.na(!!row_var)) %>%
group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
res <- res_2
} else {
col_var <- as.name(col_var)
if (col_perc){
res_1 <- data %>%
filter(!is.na(!!row_var), !is.na(!!col_var)) %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
group_by(!!col_var) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
} else {
res_1 <- data %>%
filter(!is.na(!!row_var), !is.na(!!col_var)) %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
}
res_2 <- data %>%
filter(!is.na(!!row_var)) %>%
group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
res <- bind_rows(res_1, res_2)
}
#combine the row
res <- res %>% rowwise() %>%
mutate(comb = str_c(n, "(", `Percentage(%)`, ")"),
Variable = str_c(as.character(row_var), " (= ", !!row_var, ")")
)
names(res)[1] <- "cate"
return(res)
}
#function for continuous variable-------
cont_des <- function(data,
row_var = "mpg",
col_var = NULL,
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
if(is.null(col_var)){
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res <- res_2
} else {
col_var <- as.name(col_var)
res_1 <- data %>%
filter(!is.na(!!col_var)) %>%
group_by(!!col_var) %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res <- bind_rows(res_1, res_2)
}
if (class(res$sd) == "numeric"){
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sprintf(str_glue("%.{round_cont}f"), round(sd, round_cont)),
comb_sym[2]))
} else {
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sd,
comb_sym[2]))
}
n_loc <- which(names(res) == "mean")
names(res)[n_loc:(n_loc + 1)] <- fun
return(res)
}
utils::globalVariables(c("N", "Percentage(%)", "Variable", "comb"))
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cate = 2,
round_cont = 3)
#function for all-------
data_des <- function(data,
row_var = c("vs", "mpg"),
col_var = NULL,
col_perc = TRUE,
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cate = 1,
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
if (is.null(col_var)){
res_f <- data.frame(Variable = character(0), comb = character(0))
} else {
res_f <- data.frame(Variable = character(0), col_var = character(0), comb = character(0))
}
for (var in row_var){
print(var)
var <- as.name(var)
m_len <- data %$% length(unique(eval(var)))
m_class <- data %$% class(eval(var))
if(m_len == 2 | m_class %in% c("character", "logical", "factor")){
res <- cate_des(data = data,
row_var = as.character(var),
col_var = col_var,
col_perc = col_perc,
round_cate = round_cate)
} else {
res <- cont_des(data = data,
row_var = as.character(var),
col_var = col_var,
fun = fun,
comb_sym = comb_sym,
round_cont = round_cont,
...)
}
if(is.null(col_var)){
res <- res %>% select(Variable, comb)
} else {
res <- res %>% select(Variable, as.character(col_var), comb)
names(res)[2] <- "col_var"
}
res_f <- rbind(res_f, res)
}
if(is.null(col_var)){
return(res_f)
} else {
u_Variable <- unique(res_f$Variable)
res_f <- res_f %>% spread(key = col_var, value = comb)
#res_f <- res_f %>% filter (!is.na(Variable), !is.na(age_g)) %>% spread(key = col_var, value = comb)
res_f <- res_f[match(u_Variable, res_f$Variable), ]
names(res_f)[which(names(res_f) == "<NA>")] <- "All"
names(res_f)[-1] <- str_c(as.character(col_var), " (= ", names(res_f)[-1], ")")
return(res_f)
}
}
#function for category variable------
cate_des <- function(data,
row_var = "vs",
col_var = NULL,
col_perc = TRUE,
round_cate = 1){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
#if col_var == NULL, it means no column
if(is.null(col_var)){
res_2 <- data %>%
filter(!is.na(!!row_var)) %>%
group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
res <- res_2
} else {
col_var <- as.name(col_var)
if (col_perc){
res_1 <- data %>%
filter(!is.na(!!row_var), !is.na(!!col_var)) %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
group_by(!!col_var) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
} else {
res_1 <- data %>%
filter(!is.na(!!row_var), !is.na(!!col_var)) %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
}
res_2 <- data %>%
filter(!is.na(!!row_var)) %>%
group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = sprintf(str_glue("%.{round_cate}f"), round(n/N * 100, round_cate)))
res <- bind_rows(res_1, res_2)
}
#combine the row
res <- res %>% rowwise() %>%
mutate(comb = str_c(n, " (", `Percentage(%)`, ")"),
Variable = str_c(as.character(row_var), " (= ", !!row_var, ")")
)
names(res)[1] <- "cate"
return(res)
}
#function for continuous variable-------
cont_des <- function(data,
row_var = "mpg",
col_var = NULL,
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
if(is.null(col_var)){
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res <- res_2
} else {
col_var <- as.name(col_var)
res_1 <- data %>%
filter(!is.na(!!col_var)) %>%
group_by(!!col_var) %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(sprintf(str_glue("%.{round_cont}f"),
round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont)),
collapse = ", "))
res <- bind_rows(res_1, res_2)
}
if (class(res$sd) == "numeric"){
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sprintf(str_glue("%.{round_cont}f"), round(sd, round_cont)),
comb_sym[2]))
} else {
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(sprintf(str_glue("%.{round_cont}f"), round(mean, round_cont)),
comb_sym[1],
sd,
comb_sym[2]))
}
n_loc <- which(names(res) == "mean")
names(res)[n_loc:(n_loc + 1)] <- fun
return(res)
}
utils::globalVariables(c("N", "Percentage(%)", "Variable", "comb"))
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c(" (", ")"),
round_cate = 2,
round_cont = 3)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("median", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75))
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription", force = TRUE)
devtools::install_github("shanquan0301/DataDescription", force = TRUE)
devtools::install_github("shanquan0301/DataDescription", force = TRUE)
install.packages("C:/Users/shanquan/Dropbox/DataDescription_0.1.1.tar.gz", repos = NULL, type = "source")
devtools::install_github("shanquan0301/DataDescription", force = TRUE)
??install_github
remotes::::install_github("shanquan0301/DataDescription")
remotes::install_github("shanquan0301/DataDescription")
remotes::install_github("shanquan0301/DataDescription", force = TRUE)
??install_github
devtools::install_github("shanquan0301/DataDescription", force = TRUE)
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
reg <- glm(counts ~ outcome + treatment, family = poisson())
summary(reg)
plot_forest(reg)
res <- reg_comb(reg = reg,
exp_transfer = TRUE,
coef = "coef",
round_ci = 4,
round_p = 4,
comb_ci = "coef(ci_low-ci_high)")
library(DataDescription)
res <- reg_comb(reg = reg,
exp_transfer = TRUE,
coef = "coef",
round_ci = 4,
round_p = 4,
comb_ci = "coef(ci_low-ci_high)")
res <- reg_comb(reg = reg,
exp_transfer = TRUE,
coef = "Estimate",
round_ci = 4,
round_p = 4,
comb_ci = "coef(ci_low-ci_high)")
res
View(res)
res <- res %>% select(variable, comb_ci, coef, ci_low, ci_high, p_value)
library(tidyverse)
res <- res %>% select(variable, comb_ci, coef, ci_low, ci_high, p_value)
res <- reg_comb(reg = reg,
exp_transfer = TRUE,
coef = "Estimate",
round_ci = 2,
round_p = 3,
comb_ci = "coef(ci_low-ci_high)", ...)
res <- reg_comb(reg = reg,
exp_transfer = TRUE,
coef = "Estimate",
round_ci = 2,
round_p = 3,
comb_ci = "coef(ci_low-ci_high)")
res <- res %>% select(variable, comb_ci, coef, ci_low, ci_high, p_value)
res %>% filter(str_fun(variable, "detention"), !str_detect(variable, ":")) %>% as.matrix()
res %>% filter(str_fun(variable, "detention"), !str_detect(variable, ":")) %>% as.matrix()
res
matrix(c("Dementia", NA, NA, NA, NA, NA), nrow = 1)
matrix(c("  AD", "Reference", NA, NA, NA, "Reference"), nrow = 1)
res %>% filter(str_fun(variable, "group")) %>% as.matrix()
res %>% filter(str_fun(variable, "age")) %>% as.matrix()
mdat <- list(
res %>% filter(str_fun(variable, "detention"), !str_detect(variable, ":")) %>% as.matrix(),
matrix(c("Dementia", NA, NA, NA, NA, NA), nrow = 1),
matrix(c("  AD", "Reference", NA, NA, NA, "Reference"), nrow = 1),
res %>% filter(str_fun(variable, "group")) %>% as.matrix(),
res %>% filter(str_fun(variable, "age")) %>% as.matrix(),
matrix(c("Gender", NA, NA, NA, NA, NA), nrow = 1),
matrix(c("  Female", "Reference", NA, NA, NA, "Reference"), nrow = 1),
res %>% filter(str_fun(variable, "gender")) %>% as.matrix(),
matrix(c("Marital status", NA, NA, NA, NA, NA), nrow = 1),
matrix(c("  single", "Reference", NA, NA, NA, "Reference"), nrow = 1),
res %>% filter(str_fun(variable, "mari")) %>% as.matrix(),
matrix(c("Ethnicity", NA, NA, NA, NA, NA), nrow = 1),
matrix(c("  White", "Reference", NA, NA, NA, "Reference"), nrow = 1),
res %>% filter(str_fun(variable, "eth")) %>% as.matrix(),
matrix(c("Socio-economic status", NA, NA, NA, NA, NA), nrow = 1),
matrix(c("  1 (Most deprived)", "Reference", NA, NA, NA, "Reference"), nrow = 1),
res %>% filter(str_fun(variable, "imd|mmse|char|anti|smi")) %>% as.matrix()
)
mdat
library(tidyverse)
library(magrittr)
#packages------------------------------------------
library(haven)
library(survey)
library(glue)
library(crayon)
library(data.table)
library(magrittr)
library(tidyverse)
devtools::install_github("shanquan0301/DataDescription")
