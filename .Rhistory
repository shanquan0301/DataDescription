getwd()
library(DateDescription)
example(DateDescription)
?package.skeleton
package.skeleton(name="DataDescription", code_files="data_des.R")
getwd()
#' @title Structure the data as table 1 used in publication.
#' @description Category date will be presented as N(percentage). continuous data will be presented in a customized form.
#' @param data  data table.
#' @param row_var The variable shown on the row, can't be NUll.
#' @param col_var The variable shown on the column, can be NULL.
#' @param col_perc When presented the category variable, the percentage should be calculated based on row or column. Default is column.
#' @param fun  The function used on continuous variable.
#' @param comb_sym  It determines how the continuous variable will be presented.
#' @param round_cate  Decimal of category variable. Default is 1.
#' @param round_cont  Decimal of continuous variable. Default is 2.
#' @param ... Arguments given to \code{"fun"}
#' @author Shanquan CHEN \email{shanquan0301@gmial.com}
#' @keywords data description
#' @examples
##' data(mtcars)
##' mtcars$judge <- TRUE
##' mtcars$judge[3:7] <- FALSE
##' mtcars$judge2 <- "TRUE"
##' mtcars$judge2[3:7] <- "FALSE"
##'
##' # continuous varialbe was shown in mean(sd)
##' res_tab <- data_des(data = mtcars,
##'          row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
##'          fun = c("mean", "sd"),
##'          comb_sym = c("(", ")"),
##'          round_cate = 2,
##'          round_cont = 3)
##'
##' res_tab
##'
##' # continuous varialbe was shown in median[25% quantile, 75% quantile]
##' res_tab <- data_des(data = mtcars,
##'          row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
##'          fun = c("median", "quantile"),
##'          comb_sym = c("[", "]"),
##'          probs = c(0.25, 0.75))
##'
##' res_tab
##'
##' # continuous varialbe was shown in mean[25% quantile, 75% quantile]
##' res_tab <- data_des(data = mtcars,
##'          row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
##'          col_var = "am",
##'          fun = c("mean", "quantile"),
##'          comb_sym = c("[", "]"),
##'          probs = c(0.25, 0.75),
##'          round_cate = 2,
##'          round_cont = 3)
##'
##' res_tab
##'
#' @export data_des
#function for category variable------
cate_des <- function(data,
row_var = "vs",
col_var = NULL,
col_perc = TRUE,
round_cate = 1){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
#if col_var == NULL, it means no column
if(is.null(col_var)){
res_2 <- data %>% group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = round(n/N * 100, round_cate))
res <- res_2
} else {
col_var <- as.name(col_var)
if (col_perc){
res_1 <- data %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
group_by(!!col_var) %>%
mutate(N = sum(n),
`Percentage(%)` = round(n/N * 100, round_cate))
} else {
res_1 <- data %>%
group_by(!!row_var, !!col_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = round(n/N * 100, round_cate))
}
res_2 <- data %>% group_by(!!row_var) %>%
summarise(n = n()) %>%
mutate(N = sum(n),
`Percentage(%)` = round(n/N * 100, round_cate))
res <- bind_rows(res_1, res_2)
}
#combine the row
res <- res %>% rowwise() %>%
mutate(comb = str_c(n, "(", `Percentage(%)`, ")"),
Variable = str_c(as.character(row_var), "(= ", !!row_var, ")")
)
names(res)[1] <- "cate"
return(res)
}
#function for continuous variable-------
cont_des <- function(data,
row_var = "mpg",
col_var = NULL,
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
row_var <- as.name(row_var)
if(is.null(col_var)){
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont),
collapse = ", "))
res <- res_2
} else {
col_var <- as.name(col_var)
res_1 <- data %>%
group_by(!!col_var) %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont),
collapse = ", "))
res_2 <- data %>%
summarise(mean = do.call(fun[1], args = list(!!row_var, na.rm = TRUE)),
sd = str_c(round(do.call(fun[2],
args = list(!!row_var,
na.rm = TRUE,
...)),
round_cont),
collapse = ", "))
res <- bind_rows(res_1, res_2)
}
if (class(res$sd) == "numeric"){
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(round(mean, round_cont),
comb_sym[1],
round(sd, round_cont),
comb_sym[2]))
} else {
res <- res %>% rowwise() %>%
mutate(Variable = as.character(row_var),
comb = str_c(round(mean, round_cont),
comb_sym[1],
sd,
comb_sym[2]))
}
n_loc <- which(names(res) == "mean")
names(res)[n_loc:(n_loc + 1)] <- fun
return(res)
}
#function for all-------
data_des <- function(data,
row_var = c("vs", "mpg"),
col_var = NULL,
col_perc = TRUE,
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 1,
round_cont = 2,
...){
class(data) <- class(data)[which(class(data) != "rowwise_df")]
if (is.null(col_var)){
res_f <- data.frame(Variable = character(0), comb = character(0))
} else {
res_f <- data.frame(Variable = character(0), col_var = character(0), comb = character(0))
}
for (var in row_var){
print(var)
var <- as.name(var)
m_len <- data %$% length(unique(eval(var)))
m_class <- data %$% class(eval(var))
if(m_len == 2 | m_class %in% c("character", "logical", "factor")){
res <- cate_des(data = data,
row_var = as.character(var),
col_var = col_var,
col_perc = col_perc,
round_cate = round_cate)
} else {
res <- cont_des(data = data,
row_var = as.character(var),
col_var = col_var,
fun = fun,
comb_sym = comb_sym,
round_cont = round_cont,
...)
}
if(is.null(col_var)){
res <- res %>% select(Variable, comb)
} else {
res <- res %>% select(Variable, as.character(col_var), comb)
names(res)[2] <- "col_var"
}
res_f <- rbind(res_f, res)
}
if(is.null(col_var)){
return(res_f)
} else {
u_Variable <- unique(res_f$Variable)
res_f <- res_f %>% spread(key = col_var, value = comb)
res_f <- res_f[match(u_Variable, res_f$Variable), ]
names(res_f)[which(names(res_f) == "<NA>")] <- "All"
names(res_f)[-1] <- str_c(as.character(col_var), "(= ", names(res_f)[-1], ")")
return(res_f)
}
}
package.skeleton(name = "DataDescription", list = c("data_des", "cont_des", "cate_des"))
?roxygen2
??roxygen2
library(DataDescription)
remove.packages("DateDescription", lib="~/R/win-library/3.6")
library(DataDescription)
data(mtcars)
mtcars$judge <- TRUE
mtcars$judge[3:7] <- FALSE
mtcars$judge2 <- "TRUE"
mtcars$judge2[3:7] <- "FALSE"
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 2,
round_cont = 3)
res_tab
library(dplyr)
library(magrittr)
library(stringr)
library(tidyr)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 2,
round_cont = 3)
res_tab
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("median", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75))
res_tab
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
col_var = "am",
fun = c("mean", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75),
round_cate = 2,
round_cont = 3)
res_tab
library(DataDescription)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
col_var = "am",
fun = c("mean", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75),
round_cate = 2,
round_cont = 3)
res_tab
View(mtcars)
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
col_var = "cyl",
fun = c("mean", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75),
round_cate = 2,
round_cont = 3)
res_tab
mtcars%$% table(vs, cyl)
ls()
library(DataDescription)
getwd()
ls()
devtools::document()
devtools::document()
?sd
check()
?check
?sd
?quantile
<max
?max
?range
900000/66440000
library(data.table)
library(survival)
set.seed(1234)
SEP_EQ = "===============================================================================\n"
RELATIVE_CONDITION_HAZARD_ACTIVE <- 1  # 1 is "no difference"
START_LAG_BIAS <- 30  # act
CONDITION_HAZARD_CONTROL <- 0.01
CONDITION_HAZARD_ACTIVE <- CONDITION_HAZARD_CONTROL * RELATIVE_CONDITION_HAZARD_ACTIVE
DEATH_HAZARD_CONTROL <- 0.005
DEATH_HAZARD_ACTIVE <- DEATH_HAZARD_CONTROL
N_CONTROL <- 50
N_ACTIVE <- 50
STUDY_START_TIME <- 0
STUDY_END_TIME <- 100
CONTROL <- "control"
ACTIVE <- "active"
d <- data.table(subject = 1:(N_ACTIVE + N_CONTROL))
d[, group := factor(ifelse(subject <= N_CONTROL, CONTROL, ACTIVE),
levels = c(CONTROL, ACTIVE))]
d[, entry_time := STUDY_START_TIME + ifelse(group == ACTIVE, START_LAG_BIAS, 0
d[group == CONTROL, time_entry_to_death := rexp(n = N_CONTROL, rate = DEATH_HAZARD_CONTROL)]
d[group == ACTIVE, time_entry_to_death := rexp(n = N_ACTIVE, rate = DEATH_HAZARD_ACTIVE)]
d[group == CONTROL, time_entry_to_condition := rexp(n = N_CONTROL, rate = CONDITION_HAZARD_CONTROL)]
d[group == ACTIVE, time_entry_to_condition := rexp(n = N_ACTIVE, rate = CONDITION_HAZARD_ACTIVE)]
d[, death_time := entry_time + time_entry_to_death]
d[, condition_time := entry_time + time_entry_to_condition]
d[, died := death_time < STUDY_END_TIME]
d[, condition := condition_time < death_time & condition_time < STUDY_END_TIME]
d[, end_time := pmin(condition_time, death_time, STUDY_END_TIME)]
library(data.table)
library(survival)
?":="
set.seed(1234)
SEP_EQ = "===============================================================================\n"
RELATIVE_CONDITION_HAZARD_ACTIVE <- 1
START_LAG_BIAS <- 30  #
CONDITION_HAZARD_CONTROL <- 0.01
CONDITION_HAZARD_ACTIVE <- CONDITION_HAZARD_CONTROL * RELATIVE_CONDITION_HAZARD_ACTIVE
DEATH_HAZARD_CONTROL <- 0.005
DEATH_HAZARD_ACTIVE <- DEATH_HAZARD_CONTROL
N_CONTROL <- 50
N_ACTIVE <- 50
STUDY_START_TIME <- 0
STUDY_END_TIME <- 100
CONTROL <- "control"
ACTIVE <- "active"
d <- data.table(subject = 1:(N_ACTIVE + N_CONTROL))
d[, group := factor(ifelse(subject <= N_CONTROL, CONTROL, ACTIVE),
levels = c(CONTROL, ACTIVE))]
d[, entry_time := STUDY_START_TIME + ifelse(group == ACTIVE, START_LAG_BIAS, 0)]
d[group == CONTROL, time_entry_to_death := rexp(n = N_CONTROL, rate = DEATH_HAZARD_CONTROL)]
d[group == ACTIVE, time_entry_to_death := rexp(n = N_ACTIVE, rate = DEATH_HAZARD_ACTIVE)]
d[group == CONTROL, time_entry_to_condition := rexp(n = N_CONTROL, rate = CONDITION_HAZARD_CONTROL)]
d[group == ACTIVE, time_entry_to_condition := rexp(n = N_ACTIVE, rate = CONDITION_HAZARD_ACTIVE)]
d[, death_time := entry_time + time_entry_to_death]
d[, condition_time := entry_time + time_entry_to_condition]
d[, died := death_time < STUDY_END_TIME]
d[, condition := condition_time < death_time & condition_time < STUDY_END_TIME]
d[, end_time := pmin(condition_time, death_time, STUDY_END_TIME)]
cat(paste0(SEP_EQ, "Wrong model\n", SEP_EQ))
View(d)
m1 <- survival::coxph(s1 ~ group, data = d)
print(m1)
cat(paste0(SEP_EQ, "Wrong model\n", SEP_EQ))
s1 <- survival::Surv(time = d$end_time, event = d$condition, type = "right")
s1 <- survival::Surv(time = d$end_time, event = d$condition, type = "right")
# When you print it:
# - times are "time to event or censoring"
#   - in our toy example, "event" is "developed condition" and "censoring" is
#     "died or reached the end of the study without developing the condition"
# - "+" indicates censoring
m1 <- survival::coxph(s1 ~ group, data = d)
print(m1)
summary(m1)
d$age_1 <- sample(30:40, size = 100)
d$age_1 <- sample(30:40, size = 100, replace = TRUE)
d$age_2 <- d$age_1 + d$entry_time/10
print(m1)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group, data = d)
print(m2)
m1 <- survival::coxph(s1 ~ group + age_1, data = d)
print(m1)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_2, data = d)
print(m2)
library(dplR)
library(dplyr)
d %>% group_by(group) %>% summarise(mean = mean(age_1))
d %>% group_by(group) %>% summarise(mean = mean(age_2))
m1 <- survival::coxph(s1 ~ group + age_1, data = d)
print(m1)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_2, data = d)
print(m2)
d %>% group_by(group) %>% summarise(mean = mean(end_time))
d %>% group_by(group) %>% summarise(mean = mean(end_time - entry_time))
d$age_2 <- d$age_1 - d$entry_time/10
m1 <- survival::coxph(s1 ~ group + age_2, data = d)
print(m1)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_1, data = d)
print(m2)
d %>% group_by(group) %>% summarise(mean = mean(end_time - entry_time))
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_1, data = d)
print(m2)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_1, data = d)
print(m2)
s1 <- survival::Surv(time = d$end_time, event = d$condition, type = "right")
# When you print it:
# - times are "time to event or censoring"
#   - in our toy example, "event" is "developed condition" and "censoring" is
#     "died or reached the end of the study without developing the condition"
# - "+" indicates censoring
m1 <- survival::coxph(s1 ~ group + age_2, data = d)
print(m1)
d %>% group_by(group) %>% summarise(mean = sum(condition))
d %>% group_by(group) %>% summarise(mean = condition*(end_time - entry_time)/50)
d %>% group_by(group) %>% summarise(mean = condition*(end_time - entry_time))
d %>% group_by(group) %>% summarise(mean = sum(condition*(end_time - entry_time))/50)
s2 <- survival::Surv(time = d$end_time - d$entry_time, event = d$condition, type = "right")
m2 <- survival::coxph(s2 ~ group + age_1, data = d)
print(m2)
d$end_time_2[d$group == "control"] <- d$end_time[d$group == "control"]  + 3
d$end_time_2[d$group == "active"] <- d$end_time[d$group == "active"]
d$age[d$group == "active"] <- d$age[d$group == "active"]
d$age[d$group == "control"] <- d$age[d$group == "control"]  - 3
View(d)
d$age = 0
d$age[d$group == "control"] <- d$age[d$group == "control"]  - 3
d$age[d$group == "active"] <- d$age[d$group == "active"]
d$age[d$group == "control"] <- d$age_1[d$group == "control"]  - 3
d$age[d$group == "active"] <- d$age_1[d$group == "active"]
s3 <- survival::Surv(time = d$end_time_2 - d$entry_time, event = d$condition, type = "right")
m3 <- survival::coxph(s2 ~ group + age, data = d)
print(m3)
print(m2)
?":="
devtools::install_github("shanquan0301/DataDescription")
getwd()
library(DataDescription)
data(mtcars)
mtcars$judge <- TRUE
mtcars$judge[3:7] <- FALSE
mtcars$judge2 <- "TRUE"
mtcars$judge2[3:7] <- "FALSE"
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("mean", "sd"),
comb_sym = c("(", ")"),
round_cate = 2,
round_cont = 3)
res_tab
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
fun = c("median", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75))
res_tab
res_tab <- data_des(data = mtcars,
row_var = c("vs", "mpg", "wt", "gear", "judge", "judge2"),
col_var = "am",
fun = c("mean", "quantile"),
comb_sym = c("[", "]"),
probs = c(0.25, 0.75),
round_cate = 2,
round_cont = 3)
res_tab
library(DataDescription)
?confint
?glmm
?glm
devtools::install_github("shanquan0301/DataDescription")
library(DataDescription)
str_fun <- function(x, str = str){
str <- str_c(str, collapse = "|")
res <- str_detect(x, regex(str, ignore_case = TRUE))
return(res)
}
x <- c("counts", "outcome", "treatment")
str_fun(x, str = c("cou", "ment"))
library(stringr)
str_fun(x, str = c("cou", "ment"))
library(devtools)
devtools::install_github("shanquan0301/DataDescription")
file.edit(file.path(Sys.getenv("HOME"), ".R", "Makevars.win"))
devtools::install_github("shanquan0301/DataDescription")
detach("package:DataDescription", unload = TRUE)
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
remove.packages("DataDescription", lib="~/R/win-library/4.1")
devtools::install_github("shanquan0301/DataDescription")
devtools::install_github("shanquan0301/DataDescription")
reg_comb
library(DataDescription)
reg_comb
data_des
