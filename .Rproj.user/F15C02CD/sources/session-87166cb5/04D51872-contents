#packages------------------------------------------
library(haven)
library(survey)
library(NetworkComparisonTest)
library(networktools)
library(bootnet)
library(glue)
library(crayon)
library(qgraph)
library(data.table)
library(magrittr)
library(tidyverse)
#set the environment-------------------------------
#set directory of the data
path_data <- 'E:/Data_backup/MICS/Data/'

#set directory of output and create if doesn't exist
path_outcome <- 'E:/Data_backup/MICS/mental/'
if (!file.exists(path_outcome)) {dir.create(path = path_outcome)}

#list the countries available
country_name <- list.files(path = path_data)
#country_name <- country_name[seq(4, 24, by = 4)]
regions <- read_csv("E:/Data_backup/MICS/lookup.csv") %>%
  mutate(iso3 = str_to_lower(ISO3)) %>%
  select(name, country, iso3, unicef_reg)

#function----------------------------------------------
str_fun <- function(data, str = str){
  str <- str_c(str, collapse = "|")
  res <- str_detect(data, regex(str, ignore_case = TRUE))
  return(res)
}
range_var <- function(name = "CA", num = 1:5){
  str_c(name, num)
}
any_by_row <- function(...){
  dots <- unlist(list(...))
  na_num <- sum(is.na(dots))
  if(length(dots) == na_num){return(NA)}
  if(length(dots) != na_num){
    return(any(dots, na.rm = TRUE))
  }
}
mean_by_row <- function(...){
  dots <- unlist(list(...))
  na_num <- sum(is.na(dots))
  if(length(dots) == na_num){return(NA)}
  if(length(dots) != na_num){
    return(mean(dots, na.rm = TRUE))
  }
}
sum_by_row <- function(...){
  dots <- unlist(list(...))
  na_num <- sum(is.na(dots))
  if(length(dots) == na_num){return(NA)}
  if(length(dots) != na_num){
    return(sum(dots, na.rm = TRUE))
  }
}

supp_join <- function(dat_1, dat_2, full = TRUE, by = "unique_hh_ln"){
  if(full){mdat <- full_join(dat_1, dat_2, by = by, suffix = c("", ".supp"))}
  if(!full){mdat <- left_join(dat_1, dat_2, by = by, suffix = c("", ".supp"))}
  same_var <- intersect(names(dat_1), names(dat_2))
  for(i in same_var) {
    eval(parse(text = str_glue("mdat <- mdat %>% mutate({i} = ifelse(is.na({i}), {i}.supp, {i}))")))
  }
  mdat <- mdat %>% select(-ends_with("supp"))
  return(mdat)
}

#import the data
fun_data_import <- function(country = "Pakistan",
                            dataset = "hl",
                            var_id = c("HH1", "HH2", "HL1"), #used to generate unique id
                            var_interested_identify = c("disability", "wscore", "windex5r"), # identify names of variables
                            var_interested_match = c("ST3$", "TS5B", "TS6"), #match the name start with
                            var_sampling_weight = "hhweight", # sampling weight
                            level = 1){
  print(country)
  cat(str_c(rep("-", times = level), "Start to import the data\n"))

  #define the path of data
  path_spss <- str_glue('{path_data}{country}/spss/')
  spss_file <- list.files(path = path_spss, recursive = TRUE)
  spss_file <- spss_file[str_fun(spss_file, str = str_c(dataset, ".sav"))]
  final_path <- str_glue('{path_spss}{spss_file}')

  if (length(final_path) == 0) {
    cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
              glue_col("{yellow No {dataset}}\n\n")))
    mdat <- NULL
    return(mdat)
    next
  }
  #read the available variable name
  dat_names <- lapply(final_path, read_sav, n_max = 0)
  dat_names <- do.call("bind_rows", dat_names)
  #not all country have the needed variables
  #judge if LN exists, or else only read HH1 and HH2
  #var_id <- var_id[var_id %in% names(dat_names)]

  #only read the var_interested exist, and report which one not exist
  res <- var_interested_identify[!var_interested_identify %in% names(dat_names)]
  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("{blue '{res}' not in the {dataset}}\n\n")))

  res <- sapply(var_interested_match,
                FUN = function(x, prefix){any(startsWith(x, prefix))},
                x = names(dat_names)) %>% unlist()

  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("{blue '{var_interested_match[!res]}' not in the {dataset}}\n\n")))

  var_interested_match <- lapply(var_interested_match[res],
                                 FUN = function(x, prefix){names(dat_names)[startsWith(x, prefix)]},
                                 x = names(dat_names)) %>% unlist()

  col_select <- c(var_id,
                  var_interested_identify[var_interested_identify %in% names(dat_names)],
                  var_interested_match,
                  var_sampling_weight)
  col_select <- unique(col_select)

  #read the data
  if (length(final_path) == 1) {mdat <- read_sav(final_path, col_select = all_of(col_select))}

  if (length(final_path) > 1) {
    for (i in 1:length(final_path)){
      dat_names <- read_sav(final_path[i], n_max = 0)
      res <- col_select[!col_select %in% names(dat_names)]
      if(length(res) > 0){
        cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
                  glue_col("{blue '{res}' not in the {final_path[i]}}\n\n")))
      }
      country_sub <- str_replace(final_path[i],  path_spss, "")
      country_sub <- str_split(country_sub, "/")[[1]][1]
      mdat_m <- read_sav(final_path[i],
                         col_select = all_of(col_select[col_select %in% names(dat_names)]))
      mdat_m$country_sub <- country_sub
      if (i == 1) {mdat <- mdat_m}
      if (i != 1) {mdat <- bind_rows(mdat, mdat_m)}
    }
  }


  cat(str_c(rep("-", times = level), "Done\n"))

  #generate unique_id and variable "sampling_weight"
  iso3 <- regions$iso3[which(regions$country == country)]
  mdat <- mdat %>% mutate(
    country_full = country,
    country_iso3 = iso3
    )

  if(length(var_id) == 2){
    var_id <- str_c("{", var_id, "}")
    str_unique_id <- str_c(c(iso3, var_id), collapse = "_")
    mdat <- mdat %>% mutate(
      unique_hh = str_glue(str_unique_id),
    )

    # for countries like Pakistan has sub country datasets, the HH1 and HH2 were repeated used, so
    # need to add sub country to generate unique id
    if (length(final_path) > 1) {
      mdat <- mdat %>% mutate(
        unique_hh = str_c(unique_hh, country_sub, sep = "_"),
      )
    }

  }

  if(length(var_id) == 3){
    mdat <- mdat %>% mutate(
      unique_hh = str_glue(str_c(c(iso3, str_c("{", var_id[1:2], "}")), collapse = "_")),
      unique_hh_ln = str_glue(str_c(c(iso3, str_c("{", var_id, "}")), collapse = "_")),
    )

    if (length(final_path) > 1) {
      mdat <- mdat %>% mutate(
        unique_hh = str_c(unique_hh, country_sub, sep = "_"),
        unique_hh_ln = str_c(unique_hh_ln, country_sub, sep = "_")
      )
    }

  }

  mdat <- mdat %>% select(country_full, country_iso3, starts_with("unique_hh"), all_of(col_select))

  return(mdat)
}

#dat_all--------------------
#import of hl<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<HL-------------------------------------
dat_hl <- lapply(country_name, FUN = fun_data_import,
                 dataset = "hl",
                 var_id = c("HH1", "HH2", "HL1"),
                 var_interested_identify = c("HL4", "HL6", "HH6", "ED2A", "melevel", "caretakerdis"),
                 var_interested_match = c("HL5", "HT12", "windex5", "windex10", "disability",
                                          range_var("DA", c(5, 6, 8:13))),
                 var_sampling_weight = "hhweight")
dat_hl <- do.call("bind_rows", dat_hl)

#add age, gender, birth, wealth, urban-------
dat_hl <- dat_hl %>% mutate(
  age = ifelse(is.na(HL6) | HL6 >= 98, ED2A, HL6),
  female = HL4 == 2,
  birth_year = HL5Y,
  birth_month = HL5M,
  birth_day = HL5D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  wealth_10 = windex10,
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_hl <- dat_hl %>% mutate(
  # Mother's functional disabilities (age 18-49 years): -----------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis = case_when(
    caretakerdis == 1 ~ TRUE,
    caretakerdis == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional = ifelse(is.na(disability), as.numeric(disability2), disability),
  functional = case_when(
    functional == 1 ~ TRUE,
    functional == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  # with glasses
  seeing_1 = case_when(
    DA5 %in% c(1, 2) ~ FALSE,
    DA5 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # without glasses
  seeing_2 = case_when(
    DA6 %in% c(1, 2) ~ FALSE,
    DA6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  dis_see = DA6,

  # Hearing------------
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  # with hearing aid
  hearing_1 = case_when(
    DA8 %in% c(1, 2) ~ FALSE,
    DA8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # without hearing aid
  hearing_2 = case_when(
    DA9 %in% c(1, 2) ~ FALSE,
    DA9 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_hear = DA9,
  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  comm = case_when(
    DA10 %in% c(1, 2) ~ FALSE,
    DA10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_comm = DA10,
  # Remembering or concentrating------------
  #1: NO DIFFICULTY REMEMBERING/ CONCENTRATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER/CONCENTRATE AT ALL; 8: DON'T KNOW; 9: No Response
  remember_conc = case_when(
    DA11 %in% c(1, 2) ~ FALSE,
    DA11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_remember_conc = DA11,
  # Walking or climbing steps------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  walking = case_when(
    DA12 %in% c(1, 2) ~ FALSE,
    DA12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_walk = DA12,
  # (self_care)Washing all over or dressing------------
  #1: NO DIFFICULTY WASHING OR DRESSING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WASH OR DRESS AT ALL; 8: DON'T KNOW; 9: No Response
  self = case_when(
    DA13 %in% c(1, 2) ~ FALSE,
    DA13 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_self = DA13)


#excluded unnecessary variables---------------
dat_hl <- dat_hl %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2)
)

dat_hl <- dat_hl %>%
  select(-c(HH1, HH2, HH6, ED2A, HL1, HL6, HL4, HL5Y, HL5M, HL5D, caretakerdis,
            disability, disability2, starts_with("DA"),
            seeing_1, seeing_2, hearing_1, hearing_2, urban_1, urban_2,
            starts_with("windex5")))


#import of fs<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FS--------
dat_fs <- lapply(country_name, FUN = fun_data_import,
                 dataset = "fs",
                 var_id = c("HH1", "HH2", "LN"),
                 var_interested_identify = c("CB3", "CB4", "CB7", "CB8A",
                                             range_var("CL", c(3, 8, 10, 13)),
                                             range_var("PR", c(3, 5, 6)),
                                             "fselevel",
                                             "HL4", "HH6",
                                             "melevel", "fsdisability", "caretakerdis"),
                 var_interested_match = c("windex5", "windex10", "FCF", "CB2", "FCD2"),
                 var_sampling_weight = "fsweight")
dat_fs <- do.call("bind_rows", dat_fs)
#add age, gender, birth, wealth, urban, FCD(parents attitude)-------
dat_fs <- dat_fs %>% mutate(
  age = CB3,
  female = HL4 == 2,
  birth_year = CB2Y,
  birth_month = CB2M,
  #birth_day = UB1D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  wealth_10 = windex10,
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#for FCD2, 9 is missing value
dat_fs <- dat_fs %>% mutate(
  across(starts_with("FCD2"), ~ ifelse(.x > 5, NA, .x == 1)),
  across(starts_with("CL"), ~ ifelse(.x == 99, NA, .x)),
)


#add difficulty-------------
dat_fs <- dat_fs %>% mutate(
  # Mother's functional disabilities (age 18-49 years): --------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis = case_when(
    caretakerdis == 1 ~ TRUE,
    caretakerdis == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional = case_when(
    fsdisability == 1 ~ TRUE,
    fsdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  #Child wear glasses or contact lenses
  # 1: YES; 2: NO; 9: NO RESPONSE
  seeing_1 = case_when(
    FCF1 %in% c(2) ~ FALSE,
    FCF1 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty seeing
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  seeing_2 = case_when(
    FCF6 %in% c(1, 2) ~ FALSE,
    FCF6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_see = FCF6,

  # Hearing------------
  # Child uses hearing aid
  #1: YES; 2: NO; 9: NO RESPONSE
  hearing_1 = case_when(
    FCF2 %in% c(2) ~ FALSE,
    FCF2 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),

  # Child has difficulty hearing sounds like people voices or music
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  hearing_2 = case_when(
    FCF8 %in% c(1, 2) ~ FALSE,
    FCF8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_hear = FCF8,
  # Walking ------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  #Without using equipment or assistance child has difficulty walking 100 yards
  walking_1 = case_when(
    FCF10 %in% c(1, 2) ~ FALSE,
    FCF10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Without using equipment or assistance child has difficulty walking 500 yards
  walking_2 = case_when(
    FCF11 %in% c(1, 2) ~ FALSE,
    FCF11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #When using equipment or assistance child has difficulty walking 100 yards
  walking_3 = case_when(
    FCF12 %in% c(1, 2) ~ FALSE,
    FCF12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #When using equipment or assistance child has difficulty walking 500 yards
  walking_4 = case_when(
    FCF13 %in% c(1, 2) ~ FALSE,
    FCF13 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Compared with children of the same age, child has difficulty walking 100 yards
  walking_5 = case_when(
    FCF14 %in% c(1, 2) ~ FALSE,
    FCF14 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Compared with children of the same age, child has difficulty walking 500 yards
  walking_6 = case_when(
    FCF15 %in% c(1, 2) ~ FALSE,
    FCF15 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_walk_1 = FCF10,
  dis_walk_2 = FCF11,
  dis_walk_3 = FCF12,
  dis_walk_4 = FCF13,
  # Self-care------------------------
  # Child has difficulty with self-care such as feeding or dressing
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CARE FOR SELF AT ALL; 9: NO RESPONSE
  self = case_when(
    FCF16 %in% c(1, 2) ~ FALSE,
    FCF16 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_self = FCF16,
  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  #Child has difficulty being understood by people inside of this household
  comm_1 = case_when(
    FCF17 %in% c(1, 2) ~ FALSE,
    FCF17 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty being understood by people outside of this household
  comm_2 = case_when(
    FCF18 %in% c(1, 2) ~ FALSE,
    FCF18 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_comm_1 = FCF17,
  dis_comm_2 = FCF18,
  # Learning-------------------
  #Compared with children of the same age, child has difficulty learning things
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT LEARN THINGS  AT ALL; 9: NO RESPONSE
  learn = case_when(
    FCF19 %in% c(1, 2) ~ FALSE,
    FCF19 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_learn = FCF19,
  # Remembering-----------------
  # Compared with children of the same age, child has difficulty remembering things
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER THINGS AT ALL; 9: NO RESPONSE
  remember = case_when(
    FCF20 %in% c(1, 2) ~ FALSE,
    FCF20 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_remember = FCF20,
  # Concentrating-------------------
  # Child has difficulty concentrating on an activity that he/she enjoys
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CONCENTRATE AT ALL; 9: NO RESPONSE
  conc = case_when(
    FCF21 %in% c(1, 2) ~ FALSE,
    FCF21 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_conc = FCF21,
  # Accepting change------------------
  # Child has difficulty accepting changes in his/her routine
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT ACCEPT CHANGES AT ALL; 9: NO RESPONSE
  change = case_when(
    FCF22 %in% c(1, 2) ~ FALSE,
    FCF22 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_change = FCF22,
  # Behaviour, Controlling behaviour -------------------
  # Compared with children of the same age, child have difficulty controlling his/her behaviour
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CONTROL BEHAVIOUR AT ALL; 9: NO RESPONSE
  behav = case_when(
    FCF23 %in% c(1, 2) ~ FALSE,
    FCF23 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_behav = FCF23,
  # Making friends ------------------------
  # Child has difficulty making friends
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT MAKE FRIENDS AT ALL; 9: NO RESPONSE
  friend = case_when(
    FCF24 %in% c(1, 2) ~ FALSE,
    FCF24 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  dis_friend = FCF24,
  # Anxiety --------------------
  # How often child seems very anxious, nervous or worried
  # 1: DAILY; 2: WEEKLY; 3: MONTHLY; 4: A FEW TIMES A YEAR; 5: NEVER; 9: NO RESPONSE
  anxiety = case_when(
    FCF25 %in% c(3, 4, 5) ~ FALSE,
    FCF25 %in% c(1, 2) ~ TRUE,
    TRUE ~ NA
  ),
  dis_anxiety = FCF25,
  # Depression -----------------------
  # How often child seems very sad or depressed
  # 1: DAILY; 2: WEEKLY; 3: MONTHLY; 4: A FEW TIMES A YEAR; 5: NEVER; 9: NO RESPONSE
  depression = case_when(
    FCF26 %in% c(3, 4, 5) ~ FALSE,
    FCF26 %in% c(1, 2) ~ TRUE,
    TRUE ~ NA
  ),
  dis_depression = FCF26)
#excluded unnecessary variables---------------
dat_fs <- dat_fs %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2),
  walking = mapply(any_by_row, walking_1, walking_2, walking_3, walking_4, walking_5, walking_6),
  comm = mapply(any_by_row, comm_1, comm_2),
  remember_conc = mapply(any_by_row, remember, conc)
)

dat_fs <- dat_fs %>%
  select(-c(HH1, HH2, LN, CB3, HL4, HH6, starts_with("windex5"),CB2M, CB2Y,
            fsdisability, caretakerdis,  starts_with("FCF"),
            seeing_1, seeing_2, hearing_1, hearing_2, comm_1, comm_2,
            walking_1, walking_2, walking_3, walking_4, walking_5, walking_6,
            urban_1, urban_2))

#import of hh<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<HH--------
dat_hh <- lapply(country_name, FUN = fun_data_import,
                 dataset = "hh",
                 var_id = c("HH1", "HH2"),
                 var_interested_identify = c("HH6"),
                 var_interested_match = c("windex5", "windex10"),
                 var_sampling_weight = "hhweight")
dat_hh <- do.call("bind_rows", dat_hh)
#add wealth, urban-------
dat_hh <- dat_hh %>% mutate(
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  wealth_10 = windex10,
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))


#excluded unnecessary variables---------------
dat_hh <- dat_hh %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1)
)

dat_hh <- dat_hh %>%
  select(-c(HH1, HH2, HH6, starts_with("windex5"),
            urban_1, urban_2))

#combine all data, dat_all----------
dat_all <- supp_join(dat_fs, dat_hl,full = FALSE, by = "unique_hh_ln")  #merge fs and hl
#last two lines indicate that not all hh has hl data, but all hl has hh data
dat_all <- supp_join(dat_all, dat_hh, full = FALSE, by = "unique_hh") #merge with hh
#recoding---------------
#time spend at home
dat_all <- dat_all %>% mutate(
  time_income = ifelse(is.na(CL3), 0, CL3),
  time_house = mapply(sum_by_row, CL8, CL10, CL13)
)

dat_all <- dat_all %>% mutate(
  time_house = ifelse(is.na(time_house), 0, time_house)
)
#education level
dat_all <- dat_all %>% mutate(
  edu_1 = case_when(
    country_iso3 %in% c("arg", "bgd", "blr", "cri", "cub", "dom", "dza",
                        "fji", "geo", "gha", "gmb", "gnb",  "irq", "kgz",
                        "kir", "lao", "lso", "mdg",   "mwi", "mng",
                        "npl", "pak", "pse", "sle",  "stp", "tgo", "tkm",
                        "ton", "tun", "tuv", "uzb", "vnm", "wsm", "xkx", "zwe"
                        ) ~ ifelse(CB8A >= 2, 2, CB8A),
    country_iso3 %in% c("sur", "hnd", "srb") ~ ifelse(CB8A %in% c(0, 1), 0,
                                        ifelse(CB8A == 2, 1,
                                               ifelse(CB8A >= 3, 2, CB8A))),
    country_iso3 %in% c("caf", "mne", "mkd") ~ ifelse(CB8A %in% c(0), 0,
                                        ifelse(CB8A %in% c(1, 2), 1,
                                               ifelse(CB8A >= 3, 2, CB8A))),
    country_iso3 %in% c("tca") ~ ifelse(CB8A %in% c(0), 0,
                                        ifelse(CB8A == 11, 1,
                                               ifelse(CB8A >= 12, 2, CB8A))),
    country_iso3 %in% c("cod", "tcd") ~ ifelse(CB8A == 0, 0,
                                        ifelse(CB8A == 10, 1,
                                               ifelse(CB8A >= 20, 2, CB8A)))
  ))

dat_all <- dat_all %>% mutate(
  edu_2 = case_when(
    country_iso3 %in% c("arg", "bgd", "blr", "cri", "cub", "dom", "dza",
                        "fji", "geo", "gha", "gmb", "gnb",  "irq", "kgz",
                        "kir", "lao", "lso", "mdg",   "mwi", "srb",
                        "npl", "pak", "pse", "sle",  "stp", "tgo", "tkm",
                        "ton", "tun", "tuv", "uzb", "vnm", "wsm", "xkx", "zwe"
    ) ~ ifelse(fselevel >= 2, 2, fselevel),
    country_iso3 %in% c("sur", "mng") ~ ifelse(fselevel %in% c(0, 1), 0,
                                                      ifelse(fselevel == 2, 1,
                                                             ifelse(fselevel >= 3, 2, fselevel))),
    country_iso3 %in% c("caf", "mkd", "hnd") ~ ifelse(fselevel %in% c(0), 0,
                                                      ifelse(fselevel %in% c(1, 2), 1,
                                                             ifelse(fselevel >= 3, 2, fselevel))),
    country_iso3 %in% c("mne") ~ ifelse(fselevel %in% c(0), 0,
                                                             ifelse(fselevel %in% c(1), 2,
                                                                    ifelse(fselevel >= 2, 2, fselevel))),
    # country_iso3 %in% c("tca") ~ ifelse(fselevel %in% c(0), 0,
    #                                     ifelse(fselevel == 11, 1,
    #                                            ifelse(fselevel >= 12, 2, fselevel))),
    country_iso3 %in% c("cod", "tcd") ~ ifelse(fselevel == 0, 0,
                                               ifelse(fselevel == 10, 1,
                                                      ifelse(fselevel >= 20, 2, fselevel)))
  ))

dat_all <- dat_all %>% mutate(
  edu = ifelse(is.na(edu_1), edu_2, edu_1)
)

#overall disability------------
dat_all <- dat_all %>% mutate(
  #disability of 5-17 children
  disability = mapply(any_by_row,
                      friend, behav, change, remember_conc, learn, comm, self,
                      walking, hearing, seeing)
)

#9 is miss value
dat_all <- dat_all %>%
  mutate(across(starts_with("dis"), ~ ifelse(.x > 5, NA, .x)),)

dat_all <- dat_all %>% mutate(
  dis_anxiety = 5 - dis_anxiety,
  dis_depression = 5 - dis_depression)


dat_all <- dat_all %>% mutate(
  dis_comm_sup = mapply(mean_by_row, dis_comm_1, dis_comm_2),
  dis_walk_sup = mapply(mean_by_row, dis_walk_1, dis_walk_2, dis_walk_3, dis_walk_4),
  dis_remember_conc_sup = mapply(mean_by_row, dis_remember, dis_comm)
)

dat_all <- dat_all %>% mutate(
  dis_comm = ifelse(is.na(dis_comm), dis_comm_sup, dis_comm),
  dis_walk = ifelse(is.na(dis_walk), dis_walk_sup, dis_walk),
  dis_remember_conc = ifelse(is.na(dis_remember_conc), dis_remember_conc_sup, dis_remember_conc)
)

