#packages------------------------------------------
library(haven)
library(survey)
library(glue)
library(crayon)
library(data.table)
library(magrittr)
library(tidyverse)
#set the environment-------------------------------
#set directory of the data
path_data <- 'E:/Data_backup/MICS/Data/'

#set directory of output and create if doesn't exist
path_outcome <- 'E:/Data_backup/MICS/try/'
if (!file.exists(path_outcome)) {dir.create(path = path_outcome)}

#list the countries available
country_name <- list.files(path = path_data)
#country_name <- country_name[seq(4, 24, by = 4)]
regions <- read_csv("E:/Data_backup/MICS/lookup.csv") %>%
  mutate(iso3 = str_to_lower(ISO3)) %>%
  select(name, country, iso3, unicef_reg)

#function----------------------------------------------
str_fun <- function(data, str = str){
  str <- str_c(str, collapse = "|")
  res <- str_detect(data, regex(str, ignore_case = TRUE))
  return(res)
}
range_var <- function(name = "CA", num = 1:5){
  str_c(name, num)
}
any_by_row <- function(...){
  dots <- unlist(list(...))
  na_num <- sum(is.na(dots))
  if(length(dots) == na_num){return(NA)}
  if(length(dots) != na_num){
    return(any(dots, na.rm = TRUE))
  }
}
supp_join <- function(dat_1, dat_2, full = TRUE, by = "unique_hh_ln"){
  if(full){mdat <- full_join(dat_1, dat_2, by = by, suffix = c("", ".supp"))}
  if(!full){mdat <- left_join(dat_1, dat_2, by = by, suffix = c("", ".supp"))}
  same_var <- intersect(names(dat_1), names(dat_2))
  for(i in same_var) {
    eval(parse(text = str_glue("mdat <- mdat %>% mutate({i} = ifelse(is.na({i}), {i}.supp, {i}))")))
  }
  mdat <- mdat %>% select(-ends_with("supp"))
  return(mdat)
}

#import the data
fun_data_import <- function(country = "Pakistan",
                            dataset = "hl",
                            var_id = c("HH1", "HH2", "HL1"), #used to generate unique id
                            var_interested_identify = c("disability", "wscore", "windex5r"), # identify names of variables
                            var_interested_match = c("ST3$", "TS5B", "TS6"), #match the name start with
                            var_sampling_weight = "hhweight", # sampling weight
                            level = 1){
  print(country)
  cat(str_c(rep("-", times = level), "Start to import the data\n"))

  #define the path of data
  path_spss <- str_glue('{path_data}{country}/spss/')
  spss_file <- list.files(path = path_spss, recursive = TRUE)
  spss_file <- spss_file[str_fun(spss_file, str = str_c(dataset, ".sav"))]
  final_path <- str_glue('{path_spss}{spss_file}')

  if (length(final_path) == 0) {
    cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
              glue_col("{yellow No {dataset}}\n\n")))
    mdat <- NULL
    return(mdat)
    next
  }
  #read the available variable name
  dat_names <- lapply(final_path, read_sav, n_max = 0)
  dat_names <- do.call("bind_rows", dat_names)
  #not all country have the needed variables
  #judge if LN exists, or else only read HH1 and HH2
  #var_id <- var_id[var_id %in% names(dat_names)]

  #only read the var_interested exist, and report which one not exist
  res <- var_interested_identify[!var_interested_identify %in% names(dat_names)]
  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("{blue '{res}' not in the {dataset}}\n\n")))

  res <- sapply(var_interested_match,
                FUN = function(x, prefix){any(startsWith(x, prefix))},
                x = names(dat_names)) %>% unlist()

  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("{blue '{var_interested_match[!res]}' not in the {dataset}}\n\n")))

  var_interested_match <- lapply(var_interested_match[res],
                                 FUN = function(x, prefix){names(dat_names)[startsWith(x, prefix)]},
                                 x = names(dat_names)) %>% unlist()

  col_select <- c(var_id,
                  var_interested_identify[var_interested_identify %in% names(dat_names)],
                  var_interested_match,
                  var_sampling_weight)
  col_select <- unique(col_select)

  #read the data
  if (length(final_path) == 1) {mdat <- read_sav(final_path, col_select = all_of(col_select))}

  if (length(final_path) > 1) {
    for (i in 1:length(final_path)){
      dat_names <- read_sav(final_path[i], n_max = 0)
      res <- col_select[!col_select %in% names(dat_names)]
      if(length(res) > 0){
        cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
                  glue_col("{blue '{res}' not in the {final_path[i]}}\n\n")))
      }
      country_sub <- str_replace(final_path[i],  path_spss, "")
      country_sub <- str_split(country_sub, "/")[[1]][1]
      mdat_m <- read_sav(final_path[i],
                         col_select = all_of(col_select[col_select %in% names(dat_names)]))
      mdat_m$country_sub <- country_sub
      if (i == 1) {mdat <- mdat_m}
      if (i != 1) {mdat <- bind_rows(mdat, mdat_m)}
    }
  }


  cat(str_c(rep("-", times = level), "Done\n"))

  #generate unique_id and variable "sampling_weight"
  iso3 <- regions$iso3[which(regions$country == country)]
  mdat <- mdat %>% mutate(
    country_full = country,
    country_iso3 = iso3
    )

  if(length(var_id) == 2){
    var_id <- str_c("{", var_id, "}")
    str_unique_id <- str_c(c(iso3, var_id), collapse = "_")
    mdat <- mdat %>% mutate(
      unique_hh = str_glue(str_unique_id),
    )

    # for countries like Pakistan has sub country datasets, the HH1 and HH2 were repeated used, so
    # need to add sub country to generate unique id
    if (length(final_path) > 1) {
      mdat <- mdat %>% mutate(
        unique_hh = str_c(unique_hh, country_sub, sep = "_"),
      )
    }

  }

  if(length(var_id) == 3){
    mdat <- mdat %>% mutate(
      unique_hh = str_glue(str_c(c(iso3, str_c("{", var_id[1:2], "}")), collapse = "_")),
      unique_hh_ln = str_glue(str_c(c(iso3, str_c("{", var_id, "}")), collapse = "_")),
    )

    if (length(final_path) > 1) {
      mdat <- mdat %>% mutate(
        unique_hh = str_c(unique_hh, country_sub, sep = "_"),
        unique_hh_ln = str_c(unique_hh_ln, country_sub, sep = "_")
      )
    }

  }

  mdat <- mdat %>% select(country_full, country_iso3, starts_with("unique_hh"), all_of(col_select))

  return(mdat)
}

#dat_all--------------------
#import of hl<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<HL-------------------------------------
dat_hl <- lapply(country_name, FUN = fun_data_import,
                 dataset = "hl",
                 var_id = c("HH1", "HH2", "HL1"),
                 var_interested_identify = c("HL4", "HL6", "HH6", "ED2A", "melevel", "caretakerdis"),
                 var_interested_match = c("HL5", "HT12", "windex5", "disability",
                                          range_var("DA", c(5, 6, 8:13))),
                 var_sampling_weight = "hhweight")
dat_hl <- do.call("bind_rows", dat_hl)

#add age, gender, birth, wealth, urban-------
dat_hl <- dat_hl %>% mutate(
  age = ifelse(is.na(HL6) | HL6 >= 98, ED2A, HL6),
  female = HL4 == 2,
  birth_year = HL5Y,
  birth_month = HL5M,
  birth_day = HL5D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_hl <- dat_hl %>% mutate(
  # Mother's functional disabilities (age 18-49 years): -----------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis = case_when(
    caretakerdis == 1 ~ TRUE,
    caretakerdis == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional = ifelse(is.na(disability), as.numeric(disability2), disability),
  functional = case_when(
    functional == 1 ~ TRUE,
    functional == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  # with glasses
  seeing_1 = case_when(
    DA5 %in% c(1, 2) ~ FALSE,
    DA5 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # without glasses
  seeing_2 = case_when(
    DA6 %in% c(1, 2) ~ FALSE,
    DA6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Hearing------------
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  # with hearing aid
  hearing_1 = case_when(
    DA8 %in% c(1, 2) ~ FALSE,
    DA8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # without hearing aid
  hearing_2 = case_when(
    DA9 %in% c(1, 2) ~ FALSE,
    DA9 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  comm = case_when(
    DA10 %in% c(1, 2) ~ FALSE,
    DA10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Remembering or concentrating------------
  #1: NO DIFFICULTY REMEMBERING/ CONCENTRATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER/CONCENTRATE AT ALL; 8: DON'T KNOW; 9: No Response
  remember_conc = case_when(
    DA11 %in% c(1, 2) ~ FALSE,
    DA11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Walking or climbing steps------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  walking = case_when(
    DA12 %in% c(1, 2) ~ FALSE,
    DA12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # (self_care)Washing all over or dressing------------
  #1: NO DIFFICULTY WASHING OR DRESSING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WASH OR DRESS AT ALL; 8: DON'T KNOW; 9: No Response
  self = case_when(
    DA13 %in% c(1, 2) ~ FALSE,
    DA13 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ))


#excluded unnecessary variables---------------
dat_hl <- dat_hl %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2)
)

dat_hl <- dat_hl %>%
  select(-c(HH1, HH2, HH6, ED2A, HL1, HL6, HL4, HL5Y, HL5M, HL5D, caretakerdis,
            disability, disability2, starts_with("DA"),
            seeing_1, seeing_2, hearing_1, hearing_2, urban_1, urban_2,
            starts_with("windex5")))


#import of ch<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<CH--------
dat_ch <- lapply(country_name, FUN = fun_data_import,
                 dataset = "ch",
                 var_id = c("HH1", "HH2", "LN"),
                 var_interested_identify = c("UB2", "AN4", "HL4", "HH6", "melevel", "CA17",
                                             "UB1Y", "UB1M", "UB1D",
                                             "cdisability", "caretakerdis",
                                             range_var("UCF", c(2, 3, 7, 9, 11:19))),
                 var_interested_match = c("windex5"),
                 var_sampling_weight = "chweight")
dat_ch <- do.call("bind_rows", dat_ch)

#add age, gender, birth, wealth, urban-------
dat_ch <- dat_ch %>% mutate(
  age = ifelse(is.na(UB2), AN4, UB2),
  female = HL4 == 2,
  birth_year = UB1Y,
  birth_month = UB1M,
  birth_day = UB1D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_ch <- dat_ch %>% mutate(
  # Mother's functional disabilities (age 18-49 years): --------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis = case_when(
    caretakerdis == 1 ~ TRUE,
    caretakerdis == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional = case_when(
    cdisability == 1 ~ TRUE,
    cdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  #Child wears glasses
  # 1: YES; 2: NO; 9: NO RESPONSE
  seeing_1 = case_when(
    UCF2 %in% c(2) ~ FALSE,
    UCF2 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty seeing
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  seeing_2 = case_when(
    UCF7 %in% c(1, 2) ~ FALSE,
    UCF7 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Hearing------------
  # Child uses hearing aid
  #1: YES; 2: NO; 9: NO RESPONSE
  hearing_1 = case_when(
    UCF3 %in% c(2) ~ FALSE,
    UCF3 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),

  # Child has difficulty hearing sounds like people voices or music
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  hearing_2 = case_when(
    UCF9 %in% c(1, 2) ~ FALSE,
    UCF9 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Walking ------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  #Without using equipment or assistance child has difficulty walking
  walking_1 = case_when(
    UCF11 %in% c(1, 2) ~ FALSE,
    UCF11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #When using equipment or assistance child has difficulty walking
  walking_2 = case_when(
    UCF12 %in% c(1, 2) ~ FALSE,
    UCF12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Compared with children of the same age, child has difficulty walking
  walking_3 = case_when(
    UCF13 %in% c(1, 2) ~ FALSE,
    UCF13 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Fine motor ---------------
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT PICK UP AT ALL; 9: NO RESPONSE
  #Compared with children of the same age, child has difficulty picking upsmall objects with his/her hand
  fine_motor = case_when(
    UCF14 %in% c(1, 2) ~ FALSE,
    UCF14 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  #Child has difficulty understanding parent/caretaker
  comm_1 = case_when(
    UCF15 %in% c(1, 2) ~ FALSE,
    UCF15 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty being understood by parent/caretaker when speaks
  comm_2 = case_when(
    UCF16 %in% c(1, 2) ~ FALSE,
    UCF16 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Learning-------------------
  #Compared with children of the same age, child has difficulty learning things
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT LEARN THINGS  AT ALL; 9: NO RESPONSE
  learn = case_when(
    UCF17 %in% c(1, 2) ~ FALSE,
    UCF17 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Playing-------------------
  #Compared with children of the same age, child has difficulty playing
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT LEARN THINGS  AT ALL; 9: NO RESPONSE
  play = case_when(
    UCF18 %in% c(1, 2) ~ FALSE,
    UCF18 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Behaviour-------------------
  #Compared with children of the same age, how much child kick, bite or hit other children or adults
  #1: NOT AT ALL; 2: LESS; 3: THE SAME; 4: MORE; 5: A LOT MORE; 9: NO RESPONSE
  behav = case_when(
    UCF19 %in% c(1, 2, 3) ~ FALSE,
    UCF19 %in% c(4, 5) ~ TRUE,
    TRUE ~ NA
  ))



#excluded unnecessary variables---------------
dat_ch <- dat_ch %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2),
  walking = mapply(any_by_row, walking_1, walking_2, walking_3),
  comm = mapply(any_by_row, comm_1, comm_2)
)

dat_ch <- dat_ch %>%
  select(-c(HH1, HH2, LN, UB2, AN4, HL4, starts_with("windex5"), UB1Y, UB1M, UB1D,
            HH6, CA17, cdisability, caretakerdis,  starts_with("UCF"),
            seeing_1, seeing_2, hearing_1, hearing_2, comm_1, comm_2,
            walking_1, walking_2, walking_3,
            urban_1, urban_2))



#import of fs<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<FS--------
dat_fs <- lapply(country_name, FUN = fun_data_import,
                 dataset = "fs",
                 var_id = c("HH1", "HH2", "LN"),
                 var_interested_identify = c("CB3", "HL4", "HH6",
                                             "melevel", "fsdisability", "caretakerdis"),
                 var_interested_match = c("windex5", "FCF", "CB2"),
                 var_sampling_weight = "fsweight")
dat_fs <- do.call("bind_rows", dat_fs)
#add age, gender, birth, wealth, urban-------
dat_fs <- dat_fs %>% mutate(
  age = CB3,
  female = HL4 == 2,
  birth_year = CB2Y,
  birth_month = CB2M,
  #birth_day = UB1D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_fs <- dat_fs %>% mutate(
  # Mother's functional disabilities (age 18-49 years): --------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis = case_when(
    caretakerdis == 1 ~ TRUE,
    caretakerdis == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional = case_when(
    fsdisability == 1 ~ TRUE,
    fsdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  #Child wear glasses or contact lenses
  # 1: YES; 2: NO; 9: NO RESPONSE
  seeing_1 = case_when(
    FCF1 %in% c(2) ~ FALSE,
    FCF1 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty seeing
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  seeing_2 = case_when(
    FCF6 %in% c(1, 2) ~ FALSE,
    FCF6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Hearing------------
  # Child uses hearing aid
  #1: YES; 2: NO; 9: NO RESPONSE
  hearing_1 = case_when(
    FCF2 %in% c(2) ~ FALSE,
    FCF2 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),

  # Child has difficulty hearing sounds like people voices or music
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  hearing_2 = case_when(
    FCF8 %in% c(1, 2) ~ FALSE,
    FCF8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Walking ------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  #Without using equipment or assistance child has difficulty walking 100 yards
  walking_1 = case_when(
    FCF10 %in% c(1, 2) ~ FALSE,
    FCF10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Without using equipment or assistance child has difficulty walking 500 yards
  walking_2 = case_when(
    FCF11 %in% c(1, 2) ~ FALSE,
    FCF11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #When using equipment or assistance child has difficulty walking 100 yards
  walking_3 = case_when(
    FCF12 %in% c(1, 2) ~ FALSE,
    FCF12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #When using equipment or assistance child has difficulty walking 500 yards
  walking_4 = case_when(
    FCF13 %in% c(1, 2) ~ FALSE,
    FCF13 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Compared with children of the same age, child has difficulty walking 100 yards
  walking_5 = case_when(
    FCF14 %in% c(1, 2) ~ FALSE,
    FCF14 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Compared with children of the same age, child has difficulty walking 500 yards
  walking_6 = case_when(
    FCF15 %in% c(1, 2) ~ FALSE,
    FCF15 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # Self-care------------------------
  # Child has difficulty with self-care such as feeding or dressing
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CARE FOR SELF AT ALL; 9: NO RESPONSE
  self = case_when(
    FCF16 %in% c(1, 2) ~ FALSE,
    FCF16 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  #Child has difficulty being understood by people inside of this household
  comm_1 = case_when(
    FCF17 %in% c(1, 2) ~ FALSE,
    FCF17 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  #Child has difficulty being understood by people outside of this household
  comm_2 = case_when(
    FCF18 %in% c(1, 2) ~ FALSE,
    FCF18 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Learning-------------------
  #Compared with children of the same age, child has difficulty learning things
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT LEARN THINGS  AT ALL; 9: NO RESPONSE
  learn = case_when(
    FCF19 %in% c(1, 2) ~ FALSE,
    FCF19 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # Remembering-----------------
  # Compared with children of the same age, child has difficulty remembering things
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER THINGS AT ALL; 9: NO RESPONSE
  remember = case_when(
    FCF20 %in% c(1, 2) ~ FALSE,
    FCF20 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Concentrating-------------------
  # Child has difficulty concentrating on an activity that he/she enjoys
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CONCENTRATE AT ALL; 9: NO RESPONSE
  conc = case_when(
    FCF21 %in% c(1, 2) ~ FALSE,
    FCF21 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Accepting change------------------
  # Child has difficulty accepting changes in his/her routine
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT ACCEPT CHANGES AT ALL; 9: NO RESPONSE
  change = case_when(
    FCF22 %in% c(1, 2) ~ FALSE,
    FCF22 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Behaviour, Controlling behaviour -------------------
  # Compared with children of the same age, child have difficulty controlling his/her behaviour
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CONTROL BEHAVIOUR AT ALL; 9: NO RESPONSE
  behav = case_when(
    FCF23 %in% c(1, 2) ~ FALSE,
    FCF23 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Making friends ------------------------
  # Child has difficulty making friends
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT MAKE FRIENDS AT ALL; 9: NO RESPONSE
  friend = case_when(
    FCF24 %in% c(1, 2) ~ FALSE,
    FCF24 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Anxiety --------------------
  # How often child seems very anxious, nervous or worried
  # 1: DAILY; 2: WEEKLY; 3: MONTHLY; 4: A FEW TIMES A YEAR; 5: NEVER; 9: NO RESPONSE
  anxiety = case_when(
    FCF25 %in% c(3, 4, 5) ~ FALSE,
    FCF25 %in% c(1, 2) ~ TRUE,
    TRUE ~ NA
  ),

  # Depression -----------------------
  # How often child seems very sad or depressed
  # 1: DAILY; 2: WEEKLY; 3: MONTHLY; 4: A FEW TIMES A YEAR; 5: NEVER; 9: NO RESPONSE
  depression = case_when(
    FCF26 %in% c(3, 4, 5) ~ FALSE,
    FCF26 %in% c(1, 2) ~ TRUE,
    TRUE ~ NA
  ))
#excluded unnecessary variables---------------
dat_fs <- dat_fs %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2),
  walking = mapply(any_by_row, walking_1, walking_2, walking_3, walking_4, walking_5, walking_6),
  comm = mapply(any_by_row, comm_1, comm_2),
  remember_conc = mapply(any_by_row, remember, conc)
)

dat_fs <- dat_fs %>%
  select(-c(HH1, HH2, LN, CB3, HL4, HH6, starts_with("windex5"),CB2M, CB2Y,
            fsdisability, caretakerdis,  starts_with("FCF"),
            seeing_1, seeing_2, hearing_1, hearing_2, comm_1, comm_2,
            walking_1, walking_2, walking_3, walking_4, walking_5, walking_6,
            urban_1, urban_2))

#import of wm<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<WM--------
dat_wm <- lapply(country_name, FUN = fun_data_import,
                 dataset = "wm",
                 var_id = c("HH1", "HH2", "LN"),
                 var_interested_identify = c("WB4", "HH6", "disability", "mdisability"),
                 var_interested_match = c("windex5", "WB3", "AF", "welevel"),
                 var_sampling_weight = "wmweight")
dat_wm <- do.call("bind_rows", dat_wm)

#add age, gender, birth, wealth, urban-------
dat_wm <- dat_wm %>% mutate(
  age = WB4,
  female = TRUE,
  birth_year = WB3Y,
  birth_month = WB3M,
  birth_day = WB3D,
  wealth = windex5,
  melvel = welevel,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_wm <- dat_wm %>% mutate(
  # Mother's functional disabilities (age 18-49 years): --------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis_1 = case_when(
    disability == 1 ~ TRUE,
    disability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  caretake_functional_dis_2 = case_when(
    mdisability == 1 ~ TRUE,
    mdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional_1 = case_when(
    disability == 1 ~ TRUE,
    disability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  functional_2 = case_when(
    mdisability == 1 ~ TRUE,
    mdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  # Use glasses or contact lenses
  # 1: YES; 2: NO; 9: NO RESPONSE
  seeing_1 = case_when(
    AF2 %in% c(2) ~ FALSE,
    AF2 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),
  # Difficulty seeing, even if wearing glasses or contact lenses
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  seeing_2 = case_when(
    AF6 %in% c(1, 2) ~ FALSE,
    AF6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Hearing------------
  # Use hearing aid
  #1: YES; 2: NO; 9: NO RESPONSE
  hearing_1 = case_when(
    AF3 %in% c(2) ~ FALSE,
    AF3 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),

  # Difficulty hearing, even if using a hearing aid
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  hearing_2 = case_when(
    AF8 %in% c(1, 2) ~ FALSE,
    AF8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Walking ------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  #Difficulty walking or climbing steps
  walking = case_when(
    AF9 %in% c(1, 2) ~ FALSE,
    AF9 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # Remembering or concentrating------------
  # Difficulty remembering or concentrating
  #1: NO DIFFICULTY REMEMBERING/ CONCENTRATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER/CONCENTRATE AT ALL; 8: DON'T KNOW; 9: No Response
  remember_conc = case_when(
    AF10 %in% c(1, 2) ~ FALSE,
    AF10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Self-care------------------------
  # Difficulty with self-care, such as washing all over or dressing
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CARE FOR SELF AT ALL; 9: NO RESPONSE
  self = case_when(
    AF11 %in% c(1, 2) ~ FALSE,
    AF11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  #Difficulty communicating
  comm = case_when(
    AF12 %in% c(1, 2) ~ FALSE,
    AF12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ))

#excluded unnecessary variables---------------
dat_wm <- dat_wm %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2),
  caretake_functional_dis = mapply(any_by_row, caretake_functional_dis_1, caretake_functional_dis_2),
  functional = mapply(any_by_row, functional_1, functional_2)
)

dat_wm <- dat_wm %>%
  select(-c(HH1, HH2, LN, WB4, HH6, starts_with("windex5"), WB3Y, WB3M, WB3D,
            disability, mdisability, starts_with("AF"), starts_with("welevel"),
            seeing_1, seeing_2, hearing_1, hearing_2,
            caretake_functional_dis_1, caretake_functional_dis_2,
            functional_1, functional_2,
            urban_1, urban_2))

#import of mn<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<MN--------
dat_mn <- lapply(country_name, FUN = fun_data_import,
                 dataset = "mn",
                 var_id = c("HH1", "HH2", "LN"),
                 var_interested_identify = c("MWB4", "HH6"),
                 var_interested_match = c("windex5", "MWB3", "MAF", "disability", "mdisability"),
                 var_sampling_weight = "mnweight")
dat_mn <- do.call("bind_rows", dat_mn)
#add age, gender, birth, wealth, urban-------
dat_mn <- dat_mn %>% mutate(
  age = MWB4,
  female = FALSE,
  birth_year = MWB3Y,
  birth_month = MWB3M,
  #birth_day = WB3D,
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))

#add difficulty-------------
dat_mn <- dat_mn %>% mutate(
  # Mother's functional disabilities (age 18-49 years): --------------
  #1: Has functional difficulty; 2: Has no functional difficulty; 7: No information
  caretake_functional_dis_1 = case_when(
    disability == 1 ~ TRUE,
    disability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  caretake_functional_dis_2 = case_when(
    mdisability == 1 ~ TRUE,
    mdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  caretake_functional_dis_3 = case_when(
    mdisability59 == 1 ~ TRUE,
    mdisability59 == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Functional difficulty-------
  #1: Has functional difficulty; 2: Has no functional difficulty; 9: Missing
  functional_1 = case_when(
    disability == 1 ~ TRUE,
    disability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  functional_2 = case_when(
    mdisability == 1 ~ TRUE,
    mdisability == 2 ~ FALSE,
    TRUE ~ NA
  ),
  functional_3 = case_when(
    mdisability59 == 1 ~ TRUE,
    mdisability59 == 2 ~ FALSE,
    TRUE ~ NA
  ),

  # Seeing------------
  # Use glasses or contact lenses
  # 1: YES; 2: NO; 9: NO RESPONSE
  seeing_1 = case_when(
    MAF2 %in% c(2) ~ FALSE,
    MAF2 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),
  # Difficulty seeing, even if wearing glasses or contact lenses
  #1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT SEE AT ALL; 8: DON'T KNOW; 9: No Response
  seeing_2 = case_when(
    MAF6 %in% c(1, 2) ~ FALSE,
    MAF6 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Hearing------------
  # Use hearing aid
  #1: YES; 2: NO; 9: NO RESPONSE
  hearing_1 = case_when(
    MAF3 %in% c(2) ~ FALSE,
    MAF3 %in% c(1) ~ TRUE,
    TRUE ~ NA
  ),

  # Difficulty hearing, even if using a hearing aid
  #1: NO DIFFICULTY HEARING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT HEAR AT ALL; 8: DON'T KNOW; 9: No Response
  hearing_2 = case_when(
    MAF8 %in% c(1, 2) ~ FALSE,
    MAF8 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Walking ------------
  #1: NO DIFFICULTY WALKING OR CLIMBING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT WALK OR CLIMB AT ALL; 8: DON'T KNOW; 9: No Response
  #Difficulty walking or climbing steps
  walking = case_when(
    MAF9 %in% c(1, 2) ~ FALSE,
    MAF9 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),
  # Remembering or concentrating------------
  # Difficulty remembering or concentrating
  #1: NO DIFFICULTY REMEMBERING/ CONCENTRATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT REMEMBER/CONCENTRATE AT ALL; 8: DON'T KNOW; 9: No Response
  remember_conc = case_when(
    MAF10 %in% c(1, 2) ~ FALSE,
    MAF10 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Self-care------------------------
  # Difficulty with self-care, such as washing all over or dressing
  # 1: NO DIFFICULTY; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT CARE FOR SELF AT ALL; 9: NO RESPONSE
  self = case_when(
    MAF11 %in% c(1, 2) ~ FALSE,
    MAF11 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ),

  # Communication------------
  #1: NO DIFFICULTY COMMUNICATING; 2: SOME DIFFICULTY; 3: A LOT OF DIFFICULTY; 4: CANNOT COMMUNICATE AT ALL; 8: DON'T KNOW; 9: No Response
  #Difficulty communicating
  comm = case_when(
    MAF12 %in% c(1, 2) ~ FALSE,
    MAF12 %in% c(3, 4) ~ TRUE,
    TRUE ~ NA
  ))

#excluded unnecessary variables---------------
dat_mn <- dat_mn %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1),
  hearing = mapply(any_by_row, hearing_1, hearing_2),
  seeing = mapply(any_by_row, seeing_1, seeing_2),
  caretake_functional_dis = mapply(any_by_row, caretake_functional_dis_1, caretake_functional_dis_2, caretake_functional_dis_3),
  functional = mapply(any_by_row, functional_1, functional_2, functional_3)
)

dat_mn <- dat_mn %>%
  select(-c(HH1, HH2, LN, MWB4, HH6, starts_with("windex5"), MWB3Y, MWB3M,
            disability, mdisability, mdisability59, starts_with("MAF"),
            seeing_1, seeing_2, hearing_1, hearing_2,
            caretake_functional_dis_1, caretake_functional_dis_2, caretake_functional_dis_3,
            functional_1, functional_2, functional_3,
            urban_1, urban_2))


#import of hh<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<HH--------
dat_hh <- lapply(country_name, FUN = fun_data_import,
                 dataset = "hh",
                 var_id = c("HH1", "HH2"),
                 var_interested_identify = c("HH6", "TS5BA", "TS5BB", "TS5BC",
                                             "TS5BD", "TS5BE", "TS5BF", "TS5BG"),
                 var_interested_match = c("windex5", "ST3$",  "TS6"),
                 var_sampling_weight = "hhweight")
dat_hh <- do.call("bind_rows", dat_hh)
#add wealth, urban-------
dat_hh <- dat_hh %>% mutate(
  wealth = windex5,
  windex5r = ifelse(is.na(windex5r),
                    ifelse(is.na(windex5rc), windex5ri, windex5rc),
                    windex5r),
  urban_1 = case_when(
    HH6 == 1 ~ TRUE,
    HH6 == 2 ~ FALSE,
    TRUE ~ NA
  ),
  urban_2 = ifelse(is.na(windex5u), !is.na(windex5r), !is.na(windex5u)))




#excluded unnecessary variables---------------
dat_hh <- dat_hh %>% mutate(
  urban = ifelse(is.na(urban_1), urban_2, urban_1)
)

dat_hh <- dat_hh %>%
  select(-c(HH1, HH2, HH6, starts_with("windex5"),
            urban_1, urban_2))

#combine all data, dat_all----------
nrow(dat_hh); names(dat_hh %>% select(starts_with("unique")))
nrow(dat_hl); names(dat_hl %>% select(starts_with("unique")))
nrow(dat_ch); names(dat_ch %>% select(starts_with("unique")))
nrow(dat_fs); names(dat_fs %>% select(starts_with("unique")))
nrow(dat_wm); names(dat_wm %>% select(starts_with("unique")))
nrow(dat_mn); names(dat_mn %>% select(starts_with("unique")))

dat_all <- supp_join(dat_hl, dat_ch, by = "unique_hh_ln")  #merge hl and ch
dat_all <- supp_join(dat_all, dat_fs, by = "unique_hh_ln") #merge with fs
dat_all <- supp_join(dat_all, dat_wm, by = "unique_hh_ln") #merge with wm
dat_all <- supp_join(dat_all, dat_mn, by = "unique_hh_ln") #merge with mn

table(dat_hh$unique_hh %in% dat_all$unique_hh)
table(dat_all$unique_hh %in% dat_hh$unique_hh)
#last two lines indicate that not all hh has hl data, but all hl has hh data
dat_all <- supp_join(dat_all, dat_hh, full = FALSE, by = "unique_hh") #merge with hh

#recoding the data--------------------
dat_all <- as.data.table(dat_all)

#generate the demographic information--------------
#weight---------
# Sampling weight - keep weights in original columns
dat_all[, chweight := as.numeric(chweight)]
dat_all[, fsweight := as.numeric(fsweight)]
dat_all[, mnweight := as.numeric(mnweight)]
dat_all[, wmweight := as.numeric(wmweight)]
dat_all[, hhweight := as.numeric(hhweight)]

# Combine the weights into a single var
dat_all[, weight := ifelse(!is.na(chweight), chweight,
                           ifelse(!is.na(fsweight), fsweight,
                                  ifelse(!is.na(wmweight), wmweight,
                                         ifelse(!is.na(mnweight), mnweight,
                                                ifelse(!is.na(hhweight), hhweight)))))]

# Age categories-------------
dat_all[age>=0 & age<5, agecat := 1]
dat_all[age>=5 & age<10, agecat := 2]
dat_all[age>=10 & age<15, agecat := 3]
dat_all[age>=15 & age<20, agecat := 4]
dat_all[age>=20 & age<25, agecat := 5]
dat_all[age>=25 & age<30, agecat := 6]
dat_all[age>=30 & age<35, agecat := 7]
dat_all[age>=35 & age<40, agecat := 8]
dat_all[age>=40 & age<45, agecat := 9]
dat_all[age>=45 & age<50, agecat := 10]
dat_all[age>= 50, agecat := 11]

# Mother's education ------------
dat_all[melevel==0, mother_education := 0]
dat_all[melevel==1, mother_education := 1]
dat_all[melevel %in% c(2), mother_education := 2]
dat_all[melevel %in% c(3:6), mother_education := 3]
# overall disability----------------
dat_all <- dat_all %>% mutate(
  #disability of 0-4 children
  disability_0_4 = mapply(any_by_row,
                          behav, play, learn, comm, fine_motor, walking, hearing, seeing),
  #disability of 5-17 children
  disability_5_17_with_mental = mapply(any_by_row,
                                       friend, behav, change, remember_conc, learn, comm, self,
                                       walking, hearing, seeing, depression, anxiety),

  disability_5_7_without_mental = mapply(any_by_row,
                                         friend, behav, change, remember_conc, learn, comm, self,
                                         walking, hearing, seeing),
  #disability of adults
  disability_adult = mapply(any_by_row,
                            remember_conc, comm, walking, hearing, seeing, self)
)
# generate household level disability and add it to dat_hh----------
mdat <- dat_all %>% group_by(unique_hh) %>% summarise(
  disability = any_by_row(disability_0_4, disability_5_7_without_mental, disability_adult))

dat_hh <- left_join(dat_hh, mdat, by = "unique_hh")
#generate  the social-profection sepcific inforamion------------------
source("C:/Users/shanquan/Dropbox/MICS_R/Social Protection/Recoding.R")
setnames(dat_all, "country_iso3", "country")
dat_all <- social_protection_indicators(dat_all)

#generate the household level social support and creat dat_soc_prot--------
mdat <- dat_all %>% group_by(unique_hh) %>% summarise(
  dis_only_sp = any_by_row(dis_only_sp == 1),
  dis_multi_sp = any_by_row(dis_multi_sp == 1),
  multi_sp = any_by_row(multi_sp == 1),
  poverty_sp = any_by_row(poverty_sp == 1),
  retirement_sp = any_by_row(retirement_sp == 1),
  edu_sp = any_by_row(edu_sp == 1),
  family_sp = any_by_row(family_sp == 1),
  food_sp = any_by_row(food_sp == 1),
  work_sp = any_by_row(work_sp == 1),
  health_sp = any_by_row(health_sp == 1),
  other_sp = any_by_row(other_sp ==1))

dat_soc_prot <- left_join(dat_hh, mdat, by = "unique_hh")
dat_soc_prot <- dat_soc_prot %>% select(-starts_with(c("ST3", "TS5", "TS6")))
#dat_soc_prot <- as.data.table(dat_hh)

#some countries don't have information on social protection, exlcuded-------------
mdat <- dat_soc_prot %>% group_by(country_iso3) %>% summarise(
  sp = any_by_row(dis_only_sp, dis_multi_sp, multi_sp, poverty_sp, retirement_sp,
                    edu_sp, family_sp, food_sp, work_sp, health_sp, other_sp))
mdat <- mdat %>% filter(!is.na(sp))
dat_soc_prot <- dat_soc_prot %>% filter(country_iso3 %in% mdat$country_iso3)
#describe the variable<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-------------------
fun_desc <- function(data,
                     exposure = "disability",
                     intervention = "dis_multi_sp",
                     covars = c("wealth", "urban"),
                     uid = "unique_hh",
                     weight = "hhweight",
                     level = 1){
  print(unique(data$country_full))
  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("The exposure is {blue {exposure}} and outcome is {blue {intervention}})\n\n")))
  #generate data for description-------------
  mdat <- data %>% select(country_full, country_iso3,
                                  all_of(c(uid, exposure, intervention, covars, weight)))

  mdat$exposure <- eval(parse(text = str_glue("mdat${exposure}")))
  mdat$intervention <- eval(parse(text = str_glue("mdat${intervention}")))
  mdat$uid <- eval(parse(text = str_glue("mdat${uid}")))
  mdat$weight <- eval(parse(text = str_glue("mdat${weight}")))

  #judge if dataset is empty after omitting the missing value
  dat_ana <- mdat %>% na.omit()
  if(nrow(dat_ana) <= 1){
    cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
              glue_col("{red No one have intervention in {unique(data$country_full)}}\n\n")))
    return(data.frame())
  }

  my_design <- svydesign(ids = ~ uid, weights = ~ weight, data = dat_ana)
  n_total <- nrow(mdat)
  n_omit <- nrow(mdat) - nrow(dat_ana)
  cat(str_c(str_c(rep("-", times = level + 1), collapse = ""),
            glue_col("Omitted the cases ({yellow {n_omit} out of {n_total}}) with missing values on exposure: {blue {exposure}} or on intervention: {blue {intervention}})\n\n")))

  #overall description------------------
  cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
            "Overall description\n"))

  # all number of cases
  N_all <- nrow(dat_ana)
  # all number and prevalence of intervention
  n_all <- nrow(dat_ana %>% filter(intervention == TRUE))
  Prev_all <- n_all / N_all
  # weighted prevalence of intervention, and its confidence interval
  res <- svyciprop(~ intervention, design = my_design)
  wPrev_all <- res[1]
  wPrev_all_low <-  confint(res)[1]
  wPrev_all_high <- confint(res)[2]

  #description on those without disability ------------------
  cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
            "Description on those without exposure\n"))

  # all number of cases
  N_noEXP <- nrow(dat_ana %>% filter(exposure == FALSE))
  # all number and prevalence of intervention
  n_noEXP <- nrow(dat_ana %>% filter(exposure == FALSE, intervention == TRUE))
  Prev_noEXP <-  n_noEXP / N_noEXP
  # weighted prevalence of intervention, and its confidence interval
  res <- svyciprop(~ intervention, design = subset(my_design, exposure == FALSE))
  wPrev_noEXP <- res[1]
  wPrev_noEXP_low <-  confint(res)[1]
  wPrev_noEXP_high <- confint(res)[2]

  #description on those with disability------------------
  cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
            "Description on those with exposure\n"))

  # all number of cases
  N_EXP <- nrow(dat_ana %>% filter(exposure == TRUE))
  # all number and prevalence of intervention
  n_EXP <- nrow(dat_ana %>% filter(exposure == TRUE, intervention == TRUE))
  Prev_EXP <- n_EXP / N_EXP
  # weighted prevalence of intervention, and its confidence interval
  res <- svyciprop(~ intervention, design = subset(my_design, exposure == TRUE))
  wPrev_EXP <- res[1]
  wPrev_EXP_low <- confint(res)[1]
  wPrev_EXP_high <- confint(res)[2]

  #get the crude risk ratio and risk difference--------
  # reference https://academic.oup.com/aje/article/189/6/508/5812650
  cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
            "Get the crude risk ratio and risk difference\n"))

  res_rr <- svyglm(intervention ~ exposure,
                   design = my_design,
                   family = quasipoisson(link = "log"))

  cRisk_ratio <- res_rr$coefficients[str_detect(names(res_rr$coefficients), "exposure")]
  cRisk_ratio_low <- confint(res_rr)[, 1][str_detect(names(res_rr$coefficients), "exposure")]
  cRisk_ratio_high <- confint(res_rr)[, 2][str_detect(names(res_rr$coefficients), "exposure")]

  res_rd <- svyglm(intervention ~ exposure,
                   design = my_design,
                   family = quasipoisson(link = "identity"))
  cRisk_difference <- res_rd$coefficients[str_detect(names(res_rd$coefficients), "exposure")]
  cRisk_difference_low <- confint(res_rd)[, 1][str_detect(names(res_rd$coefficients), "exposure")]
  cRisk_difference_high <- confint(res_rd)[, 2][str_detect(names(res_rd$coefficients), "exposure")]

  #get the adjusted risk ratio and risk difference--------
  # reference https://academic.oup.com/aje/article/189/6/508/5812650
  cat(str_c(str_c(rep("-", times = level + 3), collapse = ""),
            "Get the adjusted risk ratio and risk difference\n"))

  str_formula <- str_c("intervention ~ exposure", str_c(covars, collapse  = " + "), sep = " + ")
  res_rr <- svyglm(as.formula(str_formula),
                   design = my_design,
                   family = quasipoisson(link = "log"))

  aRisk_ratio <- res_rr$coefficients[str_detect(names(res_rr$coefficients), "exposure")]
  aRisk_ratio_low <- confint(res_rr)[, 1][str_detect(names(res_rr$coefficients), "exposure")]
  aRisk_ratio_high <- confint(res_rr)[, 2][str_detect(names(res_rr$coefficients), "exposure")]


  res_rd <- svyglm(as.formula(str_formula),
                   design = my_design,
                   start = rep(0.5, length(res_rr$coefficients)),
                   family = quasipoisson(link = "identity"))
  aRisk_difference <- res_rd$coefficients[str_detect(names(res_rd$coefficients), "exposure")]
  aRisk_difference_low <- confint(res_rd)[, 1][str_detect(names(res_rd$coefficients), "exposure")]
  aRisk_difference_high <- confint(res_rd)[, 2][str_detect(names(res_rd$coefficients), "exposure")]

  res <- data_frame(
    N_all = N_all,
    n_all = n_all,
    Prev_all = Prev_all,
    wPrev_all = wPrev_all,
    wPrev_all_low = wPrev_all_low,
    wPrev_all_high = wPrev_all_high,

    N_noEXP = N_noEXP,
    n_noEXP = n_noEXP,
    Prev_noEXP = Prev_noEXP,
    wPrev_noEXP = wPrev_noEXP,
    wPrev_noEXP_low = wPrev_noEXP_low,
    wPrev_noEXP_high = wPrev_noEXP_high,

    N_EXP = N_EXP,
    n_EXP = n_EXP,
    Prev_EXP = Prev_EXP,
    wPrev_EXP = wPrev_EXP,
    wPrev_EXP_low = wPrev_EXP_low,
    wPrev_EXP_high = wPrev_EXP_high,

    cRisk_ratio = cRisk_ratio,
    cRisk_ratio_low = cRisk_ratio_low,
    cRisk_ratio_high = cRisk_ratio_high,
    aRisk_ratio = aRisk_ratio,
    aRisk_ratio_low = aRisk_ratio_low,
    aRisk_ratio_high = aRisk_ratio_high,

    cRisk_difference = cRisk_difference,
    cRisk_difference_low = cRisk_difference_low,
    cRisk_difference_high = cRisk_difference_high,
    aRisk_difference = aRisk_difference,
    aRisk_difference_low = aRisk_difference_low,
    aRisk_difference_high = aRisk_difference_high
  )

  #transfer percentage, risk ratio, and risk difference into %
  res <- res %>% mutate(
    across(contains(c("Prev", "Risk_difference")), ~round(.x * 100, 2)),
    across(contains(c("Risk_ratio")), ~round(.x, 2)),
  )
  return(res)
}

res <- dat_soc_prot %>% group_by(country_full, country_iso3) %>%
  do(fun_desc(data = ., intervention = "dis_only_sp"))


outcomes <- c("dis_only_sp", "dis_multi_sp", "multi_sp",
              "poverty_sp", "retirement_sp", "edu_sp",
              "family_sp", "food_sp", "work_sp", "health_sp", "other_sp")
names(outcomes) <- c("Social transfer for disability only", "ST disability +others", "Multiple SP",
                     "Poverty SP", "Retirement SP", "Education SP",
                     "Family benefits", "Food programmes", "Employment benefits",
                     "Health programmes", "Other social protection")

for (i in outcomes){
  dat_soc_prot %>% group_by(country_iso3) %>%
    do(fun_desc(data = ., intervention = i))
}











